#!/bin/bash

# Everything has to succeed
set -o errexit

_manifest() {
  # Generate build-info
  bin/tin.sh build-info-files
  echo 'x bin/tin.sh bin/tin.sh'
  find tin -type f -name \*.py -o -name \*.sh
}

Build() {
  # Everything here goes to stderr, so we don't have to redirect.
  _manifest | bin/tin.sh create --out $CDI_OUT/tin.tin

  # TODO: Organize this a bit better.  These can be used on their own.
  cp --verbose bin/multi.py $CDI_OUT/multi
  cp --verbose tin/py_imports.py $CDI_OUT/py-deps
}

# not called 'test' 
Test() {
  # TODO: need a tool that runs all the functions that start with test-* in a
  # shell script?  Or maybe just ./all?
  ./tin-test.sh smoke-test
}

Deploy() {
  # TODO: Change working directory?

  cd $CDI_OUT

  # Make a release with the 'tin' directory in it
  mkdir --parents release
  cp \
    tin.tin \
    py-deps \
    multi \
    release

  local version=0.1
  local out=tin-$version.zip
  rm --force $out

  # Do it in this directory to get the right relative paths
  cd release
  zip $out *

  which tree && tree

  local dest=$PBI_DEPLOY_DEST/tin/
  scp --verbose $out $dest
}

"$@"
